const { inputError } = require("../error/error")

const REGEX_EMAIL = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/
const REGEX_PASSWORD = /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{6,16}$/
const MAX_LENGTH_NAME = 255
const MAX_LENGTH_LAST_NAME = 255
const MAX_LENGTH_TITLE = 255
const MAX_LENGTH_CONTENT = 2000
const MAX_LENGTH_BIO = 2000

class userInterface {
    #user = {}
    #hasModel = false

    get id() { throw new Error('getters must be implemented') }
    get hasModel() { throw new Error('getters must be implemented') }
    get name() { throw new Error('getters must be implemented') }
    get lastName() { throw new Error('getters must be implemented') }
    get bio() { throw new Error('getters must be implemented') }
    get email() { throw new Error('getters must be implemented') }
    get refreshToken() { throw new Error('getters must be implemented') }
    get createdAt() { throw new Error('getters must be implemented') }
    get updatedAt() { throw new Error('getters must be implemented') }    

    constructor() {}

    get friends() { throw new Error('getters must be implemented') }
    get posts() { throw new Error('getters must be implemented') }


    async update(data) {
        if(data.name?.length > MAX_LENGTH_NAME) {
            throw new inputError('name')
        }
        if(data.lastName?.length > MAX_LENGTH_LAST_NAME) {
            throw new inputError('lastName')
        }
        if(data.bio?.length > MAX_LENGTH_BIO) {
            throw new inputError('bio')
        }
        //refreshToken is generated by server
        return await this._update(data)
    }
    async _update(data) {throw new Error('_update must be implemented')}


    async delete() {
        //checks
        return await this._delete()
    }
    async _delete() {throw new Error('_delete must be implemented')}

    
    async addFriend(id) {
        if(isNaN(id)) {
            throw new inputError('id')
        }
        return await this._addFriend(id)
    }
    async _addFriend(id) {throw new Error('_addFriend must be implemented')}


    async friendshipInvitations() {throw new Error('friendshipInvitations must be implemented')}


    async acceptFriend(id) {
        if(isNaN(id)) {
            throw new inputError('id')
        }
        return await this._acceptFriend(id)
    }
    async _acceptFriend(id) {throw new Error('_acceptFriend must be implemented')}


    async rejectFriend(id) {
        if(isNaN(id)) {
            throw new inputError('id')
        }
        return await this._rejectFriend(id)
    }
    async _rejectFriend(id) {throw new Error('_rejectFriend must be implemented')}


    async removeFriend(id) {
        if(isNaN(id)) {
            throw new inputError('id')
        }
        return await this._removeFriend(id)
    }
    async _removeFriend(id) {throw new Error('_removeFriend must be implemented')}

    
    async createPost(data) {
        if(data.title.length > MAX_LENGTH_TITLE) {
            throw new inputError('title')
        }
        if(data.content.length > MAX_LENGTH_CONTENT) {
            throw new inputError('content')
        }
        return await this._createPost(data)
    }
    async _createPost(data) {throw new Error('_createPost must be implemented')}


    async createComment(data) {
        if(isNaN(data.postId)) {
            throw new inputError('id')
        }
        if(data.content.length > MAX_LENGTH_CONTENT) {
            throw new inputError('content')
        }
        return await this._createComment(data)
    }
    async _createComment(data) {throw new Error('_createComment must be implemented')}

    
    async likePost(id) {
        if(!isNaN(id)) {
            return await await this._likePost(id)
        } else {
            throw new inputError('id')
        }
    }
    async _likePost(id) {throw new Error('_likePost must be implemented')}
    
    
    async likeComment(id) {
        if(!isNaN(id)) {
            return await this._likeComment(id)
        } else {
            throw new inputError('id')
        }
    }
    async _likeComment(id) {throw new Error('_likeComment must be implemented')}

    
    async checkPassword(password) {
        if(REGEX_PASSWORD.test(password)) {
            return await this._checkPassword(password)
        } else {
            throw new inputError('password')
        }
    }
    async _checkPassword(password) {throw new Error('_checkPassword must be implemented')}

    
    async toJSON() {
        return({
            'id': this.id,
            'name': this.name || '',
            'lastName': this.lastName || '',
            'bio': this.bio || '',
            'email': this.email
        })
    }
}

module.exports = userInterface